/**
 * 理解：
 *    代码所在的区域
 *    静态的（相对于上下文）,写代码时就已经确定
 *
 * 分类：
 *  全局作用域
 *  函数作用域
 *  块作用域
 *
 * 作用：
 *  变量隔离，不同作用域中同名变量不会有冲突
 *
 * 作用域与上下文的区别：
 *   全局作用域之外，每个函数都会创建自己的作用域，作用域在函数定义时就已经确定，而不是在函数调用时
 *   全局执行上下文是在全局作用域确定之后，js代码执行之前创建的
 *   函数执行上下文是在调用函数时，函数体代码执行之前创建
 *   作用域是静态的，只要函数定义好就一直存在，不会再进行变化
 *   上下文环境是动态的，调用函数时创建，函数调用结束时上下文环境会被释放
 * 联系：
 *   上下文是从属于所在的作用域
 *
 * 作用域链：
 *  多个上下级关系的作用域形成的链，从内到外
 *  查找变量时时沿着作用域链来查找的
 *
 * 查找规则：
 *  从当前作用域一直到最外层作用域，查找相同变量名，找到即返回
 */

// 题目
var x = 10;
function fn() {
  console.log(x);
}

// 不是将fn的函数放到show函数体内，而是执行fn，这样就好理解了
function show(f) {
  var x = 20;
  f();
}
show(fn);

var fn1 = function () {
  console.log(fn1);
};

fn1();

// 谨记只有三种作用域
var obj = {
  fn2: function () {
    console.log(fn2);
  }
};

obj.fn2();
